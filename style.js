
// =======================================================

//计算长度
 function getByteLen(val) {
        var len = 0;
        for (var i = 0; i < val.length; i++) {
             var a = val.charAt(i);
             if (a.match(/[^\x00-\xff]/ig) != null) 
            {
                len += 2;
            }
            else
            {
                len += 1;
            }
        }
        return len;
    }


//处理文本样式
function changeTextStyle1(str){
    var textLength=str.split("\r");
    if (typeof textLength[1]!="undefined"){ 
         
        var textL1=textLength[0].length;
        var textL2=textLength[1].length+2;
          //var  textL1=getByteLen(textLength[0]);
         //  var textL2=getByteLen(textLength[1])+2;
            //alert("textL1:  "+textL1+"textL2:  "+textL2+"text1:  "+textLength[0].length+"text2:  "+textLength[1].length); 
            
var idsetd = charIDToTypeID( "setd" );
    var desc587 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref34 = new ActionReference();
        var idTxLr = charIDToTypeID( "TxLr" );
        var idOrdn = charIDToTypeID( "Ordn" );
        var idTrgt = charIDToTypeID( "Trgt" );
        ref34.putEnumerated( idTxLr, idOrdn, idTrgt );
    desc587.putReference( idnull, ref34 );
    var idT = charIDToTypeID( "T   " );
        var desc588 = new ActionDescriptor();
        var idTxt = charIDToTypeID( "Txt " );
        desc588.putString( idTxt,str);
        var idwarp = stringIDToTypeID( "warp" );
            var desc589 = new ActionDescriptor();
            var idwarpStyle = stringIDToTypeID( "warpStyle" );
            var idwarpStyle = stringIDToTypeID( "warpStyle" );
            var idwarpNone = stringIDToTypeID( "warpNone" );
            desc589.putEnumerated( idwarpStyle, idwarpStyle, idwarpNone );
            var idwarpValue = stringIDToTypeID( "warpValue" );
            desc589.putDouble( idwarpValue, 0.000000 );
            var idwarpPerspective = stringIDToTypeID( "warpPerspective" );
            desc589.putDouble( idwarpPerspective, 0.000000 );
            var idwarpPerspectiveOther = stringIDToTypeID( "warpPerspectiveOther" );
            desc589.putDouble( idwarpPerspectiveOther, 0.000000 );
            var idwarpRotate = stringIDToTypeID( "warpRotate" );
            var idOrnt = charIDToTypeID( "Ornt" );
            var idHrzn = charIDToTypeID( "Hrzn" );
            desc589.putEnumerated( idwarpRotate, idOrnt, idHrzn );
        var idwarp = stringIDToTypeID( "warp" );
        desc588.putObject( idwarp, idwarp, desc589 );
        var idtextGridding = stringIDToTypeID( "textGridding" );
        var idtextGridding = stringIDToTypeID( "textGridding" );
        var idNone = charIDToTypeID( "None" );
        desc588.putEnumerated( idtextGridding, idtextGridding, idNone );
        var idOrnt = charIDToTypeID( "Ornt" );
        var idOrnt = charIDToTypeID( "Ornt" );
        var idHrzn = charIDToTypeID( "Hrzn" );
        desc588.putEnumerated( idOrnt, idOrnt, idHrzn );
        var idAntA = charIDToTypeID( "AntA" );
        var idAnnt = charIDToTypeID( "Annt" );
        var idantiAliasSharp = stringIDToTypeID( "antiAliasSharp" );
        desc588.putEnumerated( idAntA, idAnnt, idantiAliasSharp );
        var idbounds = stringIDToTypeID( "bounds" );
            var desc590 = new ActionDescriptor();
            var idLeft = charIDToTypeID( "Left" );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc590.putUnitDouble( idLeft, idPnt, -56.393555 );
            var idTop = charIDToTypeID( "Top " );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc590.putUnitDouble( idTop, idPnt, -24.062500 );
            var idRght = charIDToTypeID( "Rght" );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc590.putUnitDouble( idRght, idPnt, 56.113945 );
            var idBtom = charIDToTypeID( "Btom" );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc590.putUnitDouble( idBtom, idPnt, 46.083694 );
        var idbounds = stringIDToTypeID( "bounds" );
        desc588.putObject( idbounds, idbounds, desc590 );
        var idboundingBox = stringIDToTypeID( "boundingBox" );
            var desc591 = new ActionDescriptor();
            var idLeft = charIDToTypeID( "Left" );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc591.putUnitDouble( idLeft, idPnt, -55.081055 );
            var idTop = charIDToTypeID( "Top " );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc591.putUnitDouble( idTop, idPnt, -21.765625 );
            var idRght = charIDToTypeID( "Rght" );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc591.putUnitDouble( idRght, idPnt, 55.081451 );
            var idBtom = charIDToTypeID( "Btom" );
            var idPnt = charIDToTypeID( "#Pnt" );
            desc591.putUnitDouble( idBtom, idPnt, 37.611038 );
        var idboundingBox = stringIDToTypeID( "boundingBox" );
        desc588.putObject( idboundingBox, idboundingBox, desc591 );
        var idtextShape = stringIDToTypeID( "textShape" );
            var list79 = new ActionList();
                var desc592 = new ActionDescriptor();
                var idTEXT = charIDToTypeID( "TEXT" );
                var idTEXT = charIDToTypeID( "TEXT" );
                var idPnt = charIDToTypeID( "Pnt " );
                desc592.putEnumerated( idTEXT, idTEXT, idPnt );
                var idOrnt = charIDToTypeID( "Ornt" );
                var idOrnt = charIDToTypeID( "Ornt" );
                var idHrzn = charIDToTypeID( "Hrzn" );
                desc592.putEnumerated( idOrnt, idOrnt, idHrzn );
                var idTrnf = charIDToTypeID( "Trnf" );
                    var desc593 = new ActionDescriptor();
                    var idxx = stringIDToTypeID( "xx" );
                    desc593.putDouble( idxx, 1.000000 );
                    var idxy = stringIDToTypeID( "xy" );
                    desc593.putDouble( idxy, 0.000000 );
                    var idyx = stringIDToTypeID( "yx" );
                    desc593.putDouble( idyx, 0.000000 );
                    var idyy = stringIDToTypeID( "yy" );
                    desc593.putDouble( idyy, 1.000000 );
                    var idtx = stringIDToTypeID( "tx" );
                    desc593.putDouble( idtx, 0.000000 );
                    var idty = stringIDToTypeID( "ty" );
                    desc593.putDouble( idty, 0.000000 );
                var idTrnf = charIDToTypeID( "Trnf" );
                desc592.putObject( idTrnf, idTrnf, desc593 );
                var idrowCount = stringIDToTypeID( "rowCount" );
                desc592.putInteger( idrowCount, 1 );
                var idcolumnCount = stringIDToTypeID( "columnCount" );
                desc592.putInteger( idcolumnCount, 1 );
                var idrowMajorOrder = stringIDToTypeID( "rowMajorOrder" );
                desc592.putBoolean( idrowMajorOrder, true );
                var idrowGutter = stringIDToTypeID( "rowGutter" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc592.putUnitDouble( idrowGutter, idPnt, 0.000000 );
                var idcolumnGutter = stringIDToTypeID( "columnGutter" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc592.putUnitDouble( idcolumnGutter, idPnt, 0.000000 );
                var idSpcn = charIDToTypeID( "Spcn" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc592.putUnitDouble( idSpcn, idPnt, 0.000000 );
                var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                var idframeBaselineAlignment = stringIDToTypeID( "frameBaselineAlignment" );
                var idalignByAscent = stringIDToTypeID( "alignByAscent" );
                desc592.putEnumerated( idframeBaselineAlignment, idframeBaselineAlignment, idalignByAscent );
                var idfirstBaselineMinimum = stringIDToTypeID( "firstBaselineMinimum" );
                var idPnt = charIDToTypeID( "#Pnt" );
                desc592.putUnitDouble( idfirstBaselineMinimum, idPnt, 0.000000 );
                var idbase = stringIDToTypeID( "base" );
                    var desc594 = new ActionDescriptor();
                    var idHrzn = charIDToTypeID( "Hrzn" );
                    desc594.putDouble( idHrzn, 0.000000 );
                    var idVrtc = charIDToTypeID( "Vrtc" );
                    desc594.putDouble( idVrtc, 0.000000 );
                var idPnt = charIDToTypeID( "Pnt " );
                desc592.putObject( idbase, idPnt, desc594 );
            var idtextShape = stringIDToTypeID( "textShape" );
            list79.putObject( idtextShape, desc592 );
        desc588.putList( idtextShape, list79 );
        var idTxtt = charIDToTypeID( "Txtt" );
            var list80 = new ActionList();
                var desc595 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc595.putInteger( idFrom, 0 );
                var idT = charIDToTypeID( "T   " );
                desc595.putInteger( idT, textL1+1 );
                var idTxtS = charIDToTypeID( "TxtS" );
                    var desc596 = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc596.putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc596.putString( idfontPostScriptName, """FZLTDHK--GBK1-0""" );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc596.putString( idFntN, """FZLanTingHei-EB-GBK""" );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc596.putString( idFntS, """Regular""" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc596.putInteger( idScrp, 25 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc596.putInteger( idFntT, 1 );
                    var idfontAvailable = stringIDToTypeID( "fontAvailable" );
                    desc596.putBoolean( idfontAvailable, true );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc596.putUnitDouble( idSz, idPnt, 28.000000 );
                    var idimpliedFontSize = stringIDToTypeID( "impliedFontSize" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc596.putUnitDouble( idimpliedFontSize, idPnt, 28.000000 );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc596.putBoolean( idautoLeading, false );
                    var idLdng = charIDToTypeID( "Ldng" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc596.putUnitDouble( idLdng, idPnt, 35.282913 );
                    var idimpliedLeading = stringIDToTypeID( "impliedLeading" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc596.putUnitDouble( idimpliedLeading, idPnt, 35.282913 );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc596.putInteger( idTrck, -10 );
                    var iddigitSet = stringIDToTypeID( "digitSet" );
                    var iddigitSet = stringIDToTypeID( "digitSet" );
                    var iddefaultDigits = stringIDToTypeID( "defaultDigits" );
                    desc596.putEnumerated( iddigitSet, iddigitSet, iddefaultDigits );
                    var idmarkYDistFromBaseline = stringIDToTypeID( "markYDistFromBaseline" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc596.putUnitDouble( idmarkYDistFromBaseline, idPnt, 100.000000 );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idchineseLanguage = stringIDToTypeID( "chineseLanguage" );
                    desc596.putEnumerated( idtextLanguage, idtextLanguage, idchineseLanguage );
                    var idClr = charIDToTypeID( "Clr " );
                        var desc597 = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc597.putDouble( idRd, 181.001555 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc597.putDouble( idGrn, 51.999602 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc597.putDouble( idBl, 35.998353 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc596.putObject( idClr, idRGBC, desc597 );
                    var idbaseParentStyle = stringIDToTypeID( "baseParentStyle" );
                        var desc598 = new ActionDescriptor();
                        var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                        desc598.putString( idfontPostScriptName, """AdobeHeitiStd-Regular""" );
                        var idFntN = charIDToTypeID( "FntN" );
                        desc598.putString( idFntN, """Adobe Heiti Std""" );
                        var idFntS = charIDToTypeID( "FntS" );
                        desc598.putString( idFntS, """R""" );
                        var idScrp = charIDToTypeID( "Scrp" );
                        desc598.putInteger( idScrp, 25 );
                        var idFntT = charIDToTypeID( "FntT" );
                        desc598.putInteger( idFntT, 2 );
                        var idfontAvailable = stringIDToTypeID( "fontAvailable" );
                        desc598.putBoolean( idfontAvailable, true );
                        var idSz = charIDToTypeID( "Sz  " );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idSz, idPnt, 12.000000 );
                        var idimpliedFontSize = stringIDToTypeID( "impliedFontSize" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idimpliedFontSize, idPnt, 12.000000 );
                        var idHrzS = charIDToTypeID( "HrzS" );
                        desc598.putDouble( idHrzS, 100.000000 );
                        var idVrtS = charIDToTypeID( "VrtS" );
                        desc598.putDouble( idVrtS, 100.000000 );
                        var idsyntheticBold = stringIDToTypeID( "syntheticBold" );
                        desc598.putBoolean( idsyntheticBold, false );
                        var idsyntheticItalic = stringIDToTypeID( "syntheticItalic" );
                        desc598.putBoolean( idsyntheticItalic, false );
                        var idautoLeading = stringIDToTypeID( "autoLeading" );
                        desc598.putBoolean( idautoLeading, true );
                        var idTrck = charIDToTypeID( "Trck" );
                        desc598.putInteger( idTrck, 0 );
                        var idBsln = charIDToTypeID( "Bsln" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idBsln, idPnt, 0.000000 );
                        var idimpliedBaselineShift = stringIDToTypeID( "impliedBaselineShift" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idimpliedBaselineShift, idPnt, 0.000000 );
                        var idcharacterRotation = stringIDToTypeID( "characterRotation" );
                        desc598.putDouble( idcharacterRotation, 0.000000 );
                        var idAtKr = charIDToTypeID( "AtKr" );
                        var idAtKr = charIDToTypeID( "AtKr" );
                        var idmetricsKern = stringIDToTypeID( "metricsKern" );
                        desc598.putEnumerated( idAtKr, idAtKr, idmetricsKern );
                        var idfontCaps = stringIDToTypeID( "fontCaps" );
                        var idfontCaps = stringIDToTypeID( "fontCaps" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc598.putEnumerated( idfontCaps, idfontCaps, idNrml );
                        var iddigitSet = stringIDToTypeID( "digitSet" );
                        var iddigitSet = stringIDToTypeID( "digitSet" );
                        var iddefaultDigits = stringIDToTypeID( "defaultDigits" );
                        desc598.putEnumerated( iddigitSet, iddigitSet, iddefaultDigits );
                        var iddirOverride = stringIDToTypeID( "dirOverride" );
                        var iddirOverride = stringIDToTypeID( "dirOverride" );
                        var iddirOverrideDefault = stringIDToTypeID( "dirOverrideDefault" );
                        desc598.putEnumerated( iddirOverride, iddirOverride, iddirOverrideDefault );
                        var idkashidas = stringIDToTypeID( "kashidas" );
                        var idkashidas = stringIDToTypeID( "kashidas" );
                        var idkashidaDefault = stringIDToTypeID( "kashidaDefault" );
                        desc598.putEnumerated( idkashidas, idkashidas, idkashidaDefault );
                        var iddiacVPos = stringIDToTypeID( "diacVPos" );
                        var iddiacVPos = stringIDToTypeID( "diacVPos" );
                        var iddiacVPosOpenType = stringIDToTypeID( "diacVPosOpenType" );
                        desc598.putEnumerated( iddiacVPos, iddiacVPos, iddiacVPosOpenType );
                        var iddiacXOffset = stringIDToTypeID( "diacXOffset" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( iddiacXOffset, idPnt, 0.000000 );
                        var iddiacYOffset = stringIDToTypeID( "diacYOffset" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( iddiacYOffset, idPnt, 0.000000 );
                        var idmarkYDistFromBaseline = stringIDToTypeID( "markYDistFromBaseline" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idmarkYDistFromBaseline, idPnt, 100.000000 );
                        var idbaseline = stringIDToTypeID( "baseline" );
                        var idbaseline = stringIDToTypeID( "baseline" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc598.putEnumerated( idbaseline, idbaseline, idNrml );
                        var idotbaseline = stringIDToTypeID( "otbaseline" );
                        var idotbaseline = stringIDToTypeID( "otbaseline" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc598.putEnumerated( idotbaseline, idotbaseline, idNrml );
                        var idstrikethrough = stringIDToTypeID( "strikethrough" );
                        var idstrikethrough = stringIDToTypeID( "strikethrough" );
                        var idstrikethroughOff = stringIDToTypeID( "strikethroughOff" );
                        desc598.putEnumerated( idstrikethrough, idstrikethrough, idstrikethroughOff );
                        var idUndl = charIDToTypeID( "Undl" );
                        var idUndl = charIDToTypeID( "Undl" );
                        var idunderlineOff = stringIDToTypeID( "underlineOff" );
                        desc598.putEnumerated( idUndl, idUndl, idunderlineOff );
                        var idunderlineOffset = stringIDToTypeID( "underlineOffset" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idunderlineOffset, idPnt, 0.000000 );
                        var idligature = stringIDToTypeID( "ligature" );
                        desc598.putBoolean( idligature, true );
                        var idaltligature = stringIDToTypeID( "altligature" );
                        desc598.putBoolean( idaltligature, false );
                        var idcontextualLigatures = stringIDToTypeID( "contextualLigatures" );
                        desc598.putBoolean( idcontextualLigatures, false );
                        var idalternateLigatures = stringIDToTypeID( "alternateLigatures" );
                        desc598.putBoolean( idalternateLigatures, false );
                        var idoldStyle = stringIDToTypeID( "oldStyle" );
                        desc598.putBoolean( idoldStyle, false );
                        var idfractions = stringIDToTypeID( "fractions" );
                        desc598.putBoolean( idfractions, false );
                        var idordinals = stringIDToTypeID( "ordinals" );
                        desc598.putBoolean( idordinals, false );
                        var idswash = stringIDToTypeID( "swash" );
                        desc598.putBoolean( idswash, false );
                        var idtitling = stringIDToTypeID( "titling" );
                        desc598.putBoolean( idtitling, false );
                        var idconnectionForms = stringIDToTypeID( "connectionForms" );
                        desc598.putBoolean( idconnectionForms, false );
                        var idstylisticAlternates = stringIDToTypeID( "stylisticAlternates" );
                        desc598.putBoolean( idstylisticAlternates, false );
                        var idornaments = stringIDToTypeID( "ornaments" );
                        desc598.putBoolean( idornaments, false );
                        var idjustificationAlternates = stringIDToTypeID( "justificationAlternates" );
                        desc598.putBoolean( idjustificationAlternates, false );
                        var idfigureStyle = stringIDToTypeID( "figureStyle" );
                        var idfigureStyle = stringIDToTypeID( "figureStyle" );
                        var idNrml = charIDToTypeID( "Nrml" );
                        desc598.putEnumerated( idfigureStyle, idfigureStyle, idNrml );
                        var idproportionalMetrics = stringIDToTypeID( "proportionalMetrics" );
                        desc598.putBoolean( idproportionalMetrics, false );
                        var idkana = stringIDToTypeID( "kana" );
                        desc598.putBoolean( idkana, false );
                        var iditalics = stringIDToTypeID( "italics" );
                        desc598.putBoolean( iditalics, false );
                        var idruby = stringIDToTypeID( "ruby" );
                        desc598.putBoolean( idruby, false );
                        var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                        var idbaselineDirection = stringIDToTypeID( "baselineDirection" );
                        var idrotated = stringIDToTypeID( "rotated" );
                        desc598.putEnumerated( idbaselineDirection, idbaselineDirection, idrotated );
                        var idtextLanguage = stringIDToTypeID( "textLanguage" );
                        var idtextLanguage = stringIDToTypeID( "textLanguage" );
                        var idenglishLanguage = stringIDToTypeID( "englishLanguage" );
                        desc598.putEnumerated( idtextLanguage, idtextLanguage, idenglishLanguage );
                        var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                        var idjapaneseAlternate = stringIDToTypeID( "japaneseAlternate" );
                        var iddefaultForm = stringIDToTypeID( "defaultForm" );
                        desc598.putEnumerated( idjapaneseAlternate, idjapaneseAlternate, iddefaultForm );
                        var idmojiZume = stringIDToTypeID( "mojiZume" );
                        desc598.putDouble( idmojiZume, 0.000000 );
                        var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                        var idgridAlignment = stringIDToTypeID( "gridAlignment" );
                        var idroman = stringIDToTypeID( "roman" );
                        desc598.putEnumerated( idgridAlignment, idgridAlignment, idroman );
                        var idenableWariChu = stringIDToTypeID( "enableWariChu" );
                        desc598.putBoolean( idenableWariChu, false );
                        var idwariChuCount = stringIDToTypeID( "wariChuCount" );
                        desc598.putInteger( idwariChuCount, 2 );
                        var idwariChuLineGap = stringIDToTypeID( "wariChuLineGap" );
                        desc598.putInteger( idwariChuLineGap, 0 );
                        var idwariChuScale = stringIDToTypeID( "wariChuScale" );
                        desc598.putDouble( idwariChuScale, 0.500000 );
                        var idwariChuWidow = stringIDToTypeID( "wariChuWidow" );
                        desc598.putInteger( idwariChuWidow, 2 );
                        var idwariChuOrphan = stringIDToTypeID( "wariChuOrphan" );
                        desc598.putInteger( idwariChuOrphan, 2 );
                        var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                        var idwariChuJustification = stringIDToTypeID( "wariChuJustification" );
                        var idwariChuAutoJustify = stringIDToTypeID( "wariChuAutoJustify" );
                        desc598.putEnumerated( idwariChuJustification, idwariChuJustification, idwariChuAutoJustify );
                        var idtcyUpDown = stringIDToTypeID( "tcyUpDown" );
                        desc598.putInteger( idtcyUpDown, 0 );
                        var idtcyLeftRight = stringIDToTypeID( "tcyLeftRight" );
                        desc598.putInteger( idtcyLeftRight, 0 );
                        var idleftAki = stringIDToTypeID( "leftAki" );
                        desc598.putDouble( idleftAki, -1.000000 );
                        var idrightAki = stringIDToTypeID( "rightAki" );
                        desc598.putDouble( idrightAki, -1.000000 );
                        var idjiDori = stringIDToTypeID( "jiDori" );
                        desc598.putInteger( idjiDori, 0 );
                        var idnoBreak = stringIDToTypeID( "noBreak" );
                        desc598.putBoolean( idnoBreak, false );
                        var idClr = charIDToTypeID( "Clr " );
                            var desc599 = new ActionDescriptor();
                            var idRd = charIDToTypeID( "Rd  " );
                            desc599.putDouble( idRd, 0.000000 );
                            var idGrn = charIDToTypeID( "Grn " );
                            desc599.putDouble( idGrn, 0.000000 );
                            var idBl = charIDToTypeID( "Bl  " );
                            desc599.putDouble( idBl, 0.000000 );
                        var idRGBC = charIDToTypeID( "RGBC" );
                        desc598.putObject( idClr, idRGBC, desc599 );
                        var idstrokeColor = stringIDToTypeID( "strokeColor" );
                            var desc600 = new ActionDescriptor();
                            var idRd = charIDToTypeID( "Rd  " );
                            desc600.putDouble( idRd, 0.000000 );
                            var idGrn = charIDToTypeID( "Grn " );
                            desc600.putDouble( idGrn, 0.000000 );
                            var idBl = charIDToTypeID( "Bl  " );
                            desc600.putDouble( idBl, 0.000000 );
                        var idRGBC = charIDToTypeID( "RGBC" );
                        desc598.putObject( idstrokeColor, idRGBC, desc600 );
                        var idFl = charIDToTypeID( "Fl  " );
                        desc598.putBoolean( idFl, true );
                        var idStrk = charIDToTypeID( "Strk" );
                        desc598.putBoolean( idStrk, false );
                        var idfillFirst = stringIDToTypeID( "fillFirst" );
                        desc598.putBoolean( idfillFirst, true );
                        var idfillOverPrint = stringIDToTypeID( "fillOverPrint" );
                        desc598.putBoolean( idfillOverPrint, false );
                        var idstrokeOverPrint = stringIDToTypeID( "strokeOverPrint" );
                        desc598.putBoolean( idstrokeOverPrint, false );
                        var idlineCap = stringIDToTypeID( "lineCap" );
                        var idlineCap = stringIDToTypeID( "lineCap" );
                        var idbuttCap = stringIDToTypeID( "buttCap" );
                        desc598.putEnumerated( idlineCap, idlineCap, idbuttCap );
                        var idlineJoin = stringIDToTypeID( "lineJoin" );
                        var idlineJoin = stringIDToTypeID( "lineJoin" );
                        var idmiterJoin = stringIDToTypeID( "miterJoin" );
                        desc598.putEnumerated( idlineJoin, idlineJoin, idmiterJoin );
                        var idlineWidth = stringIDToTypeID( "lineWidth" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idlineWidth, idPnt, 1.000000 );
                        var idmiterLimit = stringIDToTypeID( "miterLimit" );
                        var idPnt = charIDToTypeID( "#Pnt" );
                        desc598.putUnitDouble( idmiterLimit, idPnt, 4.000000 );
                        var idlineDashoffset = stringIDToTypeID( "lineDashoffset" );
                        desc598.putDouble( idlineDashoffset, 0.000000 );
                    var idTxtS = charIDToTypeID( "TxtS" );
                    desc596.putObject( idbaseParentStyle, idTxtS, desc598 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc595.putObject( idTxtS, idTxtS, desc596 );
            var idTxtt = charIDToTypeID( "Txtt" );
            list80.putObject( idTxtt, desc595 );
                var desc601 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc601.putInteger( idFrom, textL1+1 );
                var idT = charIDToTypeID( "T   " );
                desc601.putInteger( idT, textL2+textL1);
                var idTxtS = charIDToTypeID( "TxtS" );
                    var desc602 = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc602.putBoolean( idstyleSheetHasParent, true );
                    var idfontPostScriptName = stringIDToTypeID( "fontPostScriptName" );
                    desc602.putString( idfontPostScriptName, """FZLTDHK--GBK1-0""" );
                    var idFntN = charIDToTypeID( "FntN" );
                    desc602.putString( idFntN, """FZLanTingHei-EB-GBK""" );
                    var idFntS = charIDToTypeID( "FntS" );
                    desc602.putString( idFntS, """Regular""" );
                    var idScrp = charIDToTypeID( "Scrp" );
                    desc602.putInteger( idScrp, 25 );
                    var idFntT = charIDToTypeID( "FntT" );
                    desc602.putInteger( idFntT, 1 );
                    var idfontAvailable = stringIDToTypeID( "fontAvailable" );
                    desc602.putBoolean( idfontAvailable, true );
                    var idSz = charIDToTypeID( "Sz  " );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc602.putUnitDouble( idSz, idPnt, 35.000000 );
                    var idimpliedFontSize = stringIDToTypeID( "impliedFontSize" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc602.putUnitDouble( idimpliedFontSize, idPnt, 35.000000 );
                    var idautoLeading = stringIDToTypeID( "autoLeading" );
                    desc602.putBoolean( idautoLeading, false );
                    var idLdng = charIDToTypeID( "Ldng" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc602.putUnitDouble( idLdng, idPnt, 35.282913 );
                    var idimpliedLeading = stringIDToTypeID( "impliedLeading" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc602.putUnitDouble( idimpliedLeading, idPnt, 35.282913 );
                    var idTrck = charIDToTypeID( "Trck" );
                    desc602.putInteger( idTrck, -10 );
                    var iddigitSet = stringIDToTypeID( "digitSet" );
                    var iddigitSet = stringIDToTypeID( "digitSet" );
                    var iddefaultDigits = stringIDToTypeID( "defaultDigits" );
                    desc602.putEnumerated( iddigitSet, iddigitSet, iddefaultDigits );
                    var idmarkYDistFromBaseline = stringIDToTypeID( "markYDistFromBaseline" );
                    var idPnt = charIDToTypeID( "#Pnt" );
                    desc602.putUnitDouble( idmarkYDistFromBaseline, idPnt, 100.000000 );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idtextLanguage = stringIDToTypeID( "textLanguage" );
                    var idchineseLanguage = stringIDToTypeID( "chineseLanguage" );
                    desc602.putEnumerated( idtextLanguage, idtextLanguage, idchineseLanguage );
                    var idClr = charIDToTypeID( "Clr " );
                        var desc603 = new ActionDescriptor();
                        var idRd = charIDToTypeID( "Rd  " );
                        desc603.putDouble( idRd, 181.001555 );
                        var idGrn = charIDToTypeID( "Grn " );
                        desc603.putDouble( idGrn, 51.999602 );
                        var idBl = charIDToTypeID( "Bl  " );
                        desc603.putDouble( idBl, 35.998353 );
                    var idRGBC = charIDToTypeID( "RGBC" );
                    desc602.putObject( idClr, idRGBC, desc603 );
                var idTxtS = charIDToTypeID( "TxtS" );
                desc601.putObject( idTxtS, idTxtS, desc602 );
            var idTxtt = charIDToTypeID( "Txtt" );
            list80.putObject( idTxtt, desc601 );
        desc588.putList( idTxtt, list80 );
        var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            var list81 = new ActionList();
                var desc604 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc604.putInteger( idFrom, 0 );
                var idT = charIDToTypeID( "T   " );
                desc604.putInteger( idT, textL1+1 );
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                    var desc605 = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc605.putBoolean( idstyleSheetHasParent, true );
                    var idAlgn = charIDToTypeID( "Algn" );
                    var idAlg = charIDToTypeID( "Alg " );
                    var idCntr = charIDToTypeID( "Cntr" );
                    desc605.putEnumerated( idAlgn, idAlg, idCntr );
                    var idautoLeadingPercentage = stringIDToTypeID( "autoLeadingPercentage" );
                    desc605.putDouble( idautoLeadingPercentage, 1.200000 );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingBelow = stringIDToTypeID( "leadingBelow" );
                    desc605.putEnumerated( idleadingType, idleadingType, idleadingBelow );
                    var idhyphenate = stringIDToTypeID( "hyphenate" );
                    desc605.putBoolean( idhyphenate, true );
                    var idjustificationWordMinimum = stringIDToTypeID( "justificationWordMinimum" );
                    desc605.putDouble( idjustificationWordMinimum, 0.800000 );
                    var idjustificationWordDesired = stringIDToTypeID( "justificationWordDesired" );
                    desc605.putDouble( idjustificationWordDesired, 1.000000 );
                    var idjustificationWordMaximum = stringIDToTypeID( "justificationWordMaximum" );
                    desc605.putDouble( idjustificationWordMaximum, 1.330000 );
                    var idjustificationLetterMinimum = stringIDToTypeID( "justificationLetterMinimum" );
                    desc605.putDouble( idjustificationLetterMinimum, 0.000000 );
                    var idjustificationLetterDesired = stringIDToTypeID( "justificationLetterDesired" );
                    desc605.putDouble( idjustificationLetterDesired, 0.000000 );
                    var idjustificationLetterMaximum = stringIDToTypeID( "justificationLetterMaximum" );
                    desc605.putDouble( idjustificationLetterMaximum, 0.000000 );
                    var idjustificationGlyphMinimum = stringIDToTypeID( "justificationGlyphMinimum" );
                    desc605.putDouble( idjustificationGlyphMinimum, 1.000000 );
                    var idjustificationGlyphDesired = stringIDToTypeID( "justificationGlyphDesired" );
                    desc605.putDouble( idjustificationGlyphDesired, 1.000000 );
                    var idjustificationGlyphMaximum = stringIDToTypeID( "justificationGlyphMaximum" );
                    desc605.putDouble( idjustificationGlyphMaximum, 1.000000 );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagariStandard = stringIDToTypeID( "burasagariStandard" );
                    desc605.putEnumerated( idburasagari, idburasagari, idburasagariStandard );
                    var idtextEveryLineComposer = stringIDToTypeID( "textEveryLineComposer" );
                    desc605.putBoolean( idtextEveryLineComposer, true );
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                desc604.putObject( idparagraphStyle, idparagraphStyle, desc605 );
            var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            list81.putObject( idparagraphStyleRange, desc604 );
                var desc606 = new ActionDescriptor();
                var idFrom = charIDToTypeID( "From" );
                desc606.putInteger( idFrom, textL1+1 );
                var idT = charIDToTypeID( "T   " );
                desc606.putInteger( idT,textL2+textL1);
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                    var desc607 = new ActionDescriptor();
                    var idstyleSheetHasParent = stringIDToTypeID( "styleSheetHasParent" );
                    desc607.putBoolean( idstyleSheetHasParent, true );
                    var idAlgn = charIDToTypeID( "Algn" );
                    var idAlg = charIDToTypeID( "Alg " );
                    var idCntr = charIDToTypeID( "Cntr" );
                    desc607.putEnumerated( idAlgn, idAlg, idCntr );
                    var idautoLeadingPercentage = stringIDToTypeID( "autoLeadingPercentage" );
                    desc607.putDouble( idautoLeadingPercentage, 1.200000 );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingType = stringIDToTypeID( "leadingType" );
                    var idleadingBelow = stringIDToTypeID( "leadingBelow" );
                    desc607.putEnumerated( idleadingType, idleadingType, idleadingBelow );
                    var idhyphenate = stringIDToTypeID( "hyphenate" );
                    desc607.putBoolean( idhyphenate, true );
                    var idjustificationWordMinimum = stringIDToTypeID( "justificationWordMinimum" );
                    desc607.putDouble( idjustificationWordMinimum, 0.800000 );
                    var idjustificationWordDesired = stringIDToTypeID( "justificationWordDesired" );
                    desc607.putDouble( idjustificationWordDesired, 1.000000 );
                    var idjustificationWordMaximum = stringIDToTypeID( "justificationWordMaximum" );
                    desc607.putDouble( idjustificationWordMaximum, 1.330000 );
                    var idjustificationLetterMinimum = stringIDToTypeID( "justificationLetterMinimum" );
                    desc607.putDouble( idjustificationLetterMinimum, 0.000000 );
                    var idjustificationLetterDesired = stringIDToTypeID( "justificationLetterDesired" );
                    desc607.putDouble( idjustificationLetterDesired, 0.000000 );
                    var idjustificationLetterMaximum = stringIDToTypeID( "justificationLetterMaximum" );
                    desc607.putDouble( idjustificationLetterMaximum, 0.000000 );
                    var idjustificationGlyphMinimum = stringIDToTypeID( "justificationGlyphMinimum" );
                    desc607.putDouble( idjustificationGlyphMinimum, 1.000000 );
                    var idjustificationGlyphDesired = stringIDToTypeID( "justificationGlyphDesired" );
                    desc607.putDouble( idjustificationGlyphDesired, 1.000000 );
                    var idjustificationGlyphMaximum = stringIDToTypeID( "justificationGlyphMaximum" );
                    desc607.putDouble( idjustificationGlyphMaximum, 1.000000 );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagari = stringIDToTypeID( "burasagari" );
                    var idburasagariStandard = stringIDToTypeID( "burasagariStandard" );
                    desc607.putEnumerated( idburasagari, idburasagari, idburasagariStandard );
                    var idtextEveryLineComposer = stringIDToTypeID( "textEveryLineComposer" );
                    desc607.putBoolean( idtextEveryLineComposer, true );
                var idparagraphStyle = stringIDToTypeID( "paragraphStyle" );
                desc606.putObject( idparagraphStyle, idparagraphStyle, desc607 );
            var idparagraphStyleRange = stringIDToTypeID( "paragraphStyleRange" );
            list81.putObject( idparagraphStyleRange, desc606 );
        desc588.putList( idparagraphStyleRange, list81 );
        var idkerningRange = stringIDToTypeID( "kerningRange" );
            var list82 = new ActionList();
        desc588.putList( idkerningRange, list82 );
    var idTxLr = charIDToTypeID( "TxLr" );
    desc587.putObject( idT, idTxLr, desc588 );
executeAction( idsetd, desc587, DialogModes.NO );
return true;
        }
    else
    return false;
}












// =======================================================
